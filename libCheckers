#include <jni.h>
#include "CheckersGUI.h"
#include <vector>
#include <algorithm>

class CheckersGame {
private:
    static const int BOARD_SIZE = 8;
    std::vector<std::vector<int> > board;
    int currentPlayer; // 1 for red, -1 for black

public:
    CheckersGame() : board(BOARD_SIZE, std::vector<int>(BOARD_SIZE, 0)), currentPlayer(1) {
        initializeBoard();
    }

    void initializeBoard() {
        // Place red pieces (1)
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                if ((row + col) % 2 == 1) {
                    board[row][col] = 1;
                }
            }
        }

        // Place black pieces (-1)
        for (int row = 5; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                if ((row + col) % 2 == 1) {
                    board[row][col] = -1;
                }
            }
        }
    }

    bool isValidMove(int startX, int startY, int endX, int endY) const {
        // Check bounds
        if (startX < 0 || startX >= BOARD_SIZE || startY < 0 || startY >= BOARD_SIZE ||
            endX < 0 || endX >= BOARD_SIZE || endY < 0 || endY >= BOARD_SIZE) {
            return false;
        }

        // Check if start position has current player's piece
        if (board[startY][startX] * currentPlayer <= 0) {
            return false;
        }

        // Check if end position is empty
        if (board[endY][endX] != 0) {
            return false;
        }

        int dx = endX - startX;
        int dy = endY - startY;

        // Check if move is diagonal
        if (abs(dx) != abs(dy)) {
            return false;
        }

        // Regular move
        if (abs(dx) == 1) {
            // Regular pieces can only move forward
            if (board[startY][startX] == 1 && dy <= 0) return false;
            if (board[startY][startX] == -1 && dy >= 0) return false;
            return true;
        }

        // Capture move
        if (abs(dx) == 2) {
            int midX = startX + dx / 2;
            int midY = startY + dy / 2;

            // Check if there's an opponent's piece to capture
            return board[midY][midX] == -currentPlayer;
        }

        return false;
    }

    void makeMove(int startX, int startY, int endX, int endY) {
        if (!isValidMove(startX, startY, endX, endY)) {
            return;
        }

        // Move the piece
        board[endY][endX] = board[startY][startX];
        board[startY][startX] = 0;

        // Handle capture
        if (abs(endX - startX) == 2) {
            int midX = startX + (endX - startX) / 2;
            int midY = startY + (endY - startY) / 2;
            board[midY][midX] = 0;
        }

        // King promotion
        if ((endY == 0 && board[endY][endX] == -1) ||
            (endY == BOARD_SIZE - 1 && board[endY][endX] == 1)) {
            board[endY][endX] *= 2;
        }

        // Switch players
        currentPlayer = -currentPlayer;
    }

    bool isGameOver() const {
        // Check if any player has pieces left
        bool redPieces = false;
        bool blackPieces = false;

        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                if (board[row][col] > 0) redPieces = true;
                if (board[row][col] < 0) blackPieces = true;
            }
        }

        return !redPieces || !blackPieces;
    }

    int getCurrentPlayer() const {
        return currentPlayer;
    }

    const std::vector<std::vector<int> > &getBoard() const {
        return board;
    }
};

// Global game instance
static CheckersGame game;

// JNI implementations

JNIEXPORT jobjectArray JNICALL Java_CheckersGUI_getBoardState
(JNIEnv env, jobject obj) {
    const auto &board = game.getBoard();

    // Create 2D array
    jclass intArrayClass = env.FindClass("[I"); //syntax of one dimensional array of ints
    jobjectArray result = env.NewObjectArray(8, intArrayClass, NULL);

    for (int i = 0; i < 8; i++) {
        jintArray row = env.NewIntArray(8);
        jint rowData[8];
        for (int j = 0; j < 8; j++) {
            rowData[j] = board[i][j];
        }
        env.SetIntArrayRegion(row, 0, 8, rowData);
        env.SetObjectArrayElement(result, i, row);
        env.DeleteLocalRef(row);
    }

    return result;
}

JNIEXPORT jboolean JNICALL Java_CheckersGUI_isValidMove
(JNIEnv *env, jobject obj, jint startX, jint startY, jint endX, jint endY) {
    return game.isValidMove(startX, startY, endX, endY);
}

JNIEXPORT void JNICALL Java_CheckersGUI_makeMove
(JNIEnv *env, jobject obj, jint startX, jint startY, jint endX, jint endY) {
    game.makeMove(startX, startY, endX, endY);
}

JNIEXPORT jboolean JNICALL Java_CheckersGUI_isGameOver
(JNIEnv *env, jobject obj) {
    return game.isGameOver();
}

JNIEXPORT jint JNICALL Java_CheckersGUI_getCurrentPlayer
(JNIEnv *env, jobject obj) {
    return game.getCurrentPlayer();
}
