import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.ImageIcon;

public class CheckersGUI extends JFrame {
    static {
        System.loadLibrary("libCheckersLib");
    }

    private static final int BOARD_SIZE = 8;
    private static final int SQUARE_SIZE = 80;
    private JButton[][] buttons = new JButton[BOARD_SIZE][BOARD_SIZE];
    private JLabel statusLabel;
    private Point selectedPiece = null;

    // Load images for red and white pieces
    private ImageIcon redPieceIcon = new ImageIcon("C:\\Users\\Adrian\\IdeaProjects\\Checkers\\src\\main\\resources\\checkers1.png");
    private ImageIcon whitePieceIcon = new ImageIcon("C:\\Users\\Adrian\\IdeaProjects\\Checkers\\src\\main\\resources\\checkers-1.png");

    // Native method declarations
    private native int[][] getBoardState();
    private native boolean isValidMove(int startX, int startY, int endX, int endY);
    private native void makeMove(int startX, int startY, int endX, int endY);
    private native boolean isGameOver();
    private native int getCurrentPlayer();
    private native void makeBoard();

    public CheckersGUI() {
        makeBoard();
        setTitle("Checkers Game");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Initialize components
        JPanel boardPanel = new JPanel(new GridLayout(BOARD_SIZE, BOARD_SIZE));
        statusLabel = new JLabel("Player 1's turn");

        // Create buttons for the board
        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(SQUARE_SIZE, SQUARE_SIZE));
                button.setFocusPainted(false);
                button.setBackground((row + col) % 2 == 0 ? Color.WHITE : Color.BLACK);

                final int r = row;
                final int c = col;
                button.addActionListener(e -> handleButtonClick(r, c));

                buttons[row][col] = button;
                boardPanel.add(button);
            }
        }

        // Layout setup
        add(boardPanel, BorderLayout.CENTER);
        add(statusLabel, BorderLayout.SOUTH);

        // Size and display
        pack();
        setLocationRelativeTo(null);
        setVisible(true);

        // Initialize the board state
        updateBoard();
    }

    private void updateBoard() {
        int[][] board = getBoardState();
        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                buttons[row][col].setIcon(null); // Clear any existing icon
                buttons[row][col].setText("");   // Clear button text
                buttons[row][col].setBackground((row + col) % 2 == 0 ? Color.WHITE : Color.BLACK); // Set checkerboard pattern

                if (board[row][col] != 0) {
                    // Set piece icon based on value
                    if (board[row][col] > 0) {
                        buttons[row][col].setIcon(redPieceIcon);
                    } else {
                        buttons[row][col].setIcon(whitePieceIcon);
                    }
                }
            }
        }
    }

    private void handleButtonClick(int row, int col) {
        if (selectedPiece == null) {
            selectedPiece = new Point(col, row);
            buttons[row][col].setBackground(Color.YELLOW); // Highlight selected piece
        } else {
            if (isValidMove(selectedPiece.x, selectedPiece.y, col, row)) {
                makeMove(selectedPiece.x, selectedPiece.y, col, row);
                updateBoard();
                updateGameStatus();
            }
            buttons[selectedPiece.y][selectedPiece.x].setBackground((selectedPiece.y + selectedPiece.x) % 2 == 0 ? Color.WHITE : Color.BLACK);
            selectedPiece = null;
        }
    }

    private void updateGameStatus() {
        if (isGameOver()) {
            statusLabel.setText("Game Over! Player " + getCurrentPlayer() + " wins!");
        } else {
            if(getCurrentPlayer() == -1)
                statusLabel.setText("Player 2's turn");
            else
                statusLabel.setText("Player " + getCurrentPlayer() + "'s turn");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(CheckersGUI::new);
    }
}
